(function(root, factory) {
	'use strict';

	if(typeof define === 'function' && define.amd) {
		define(['exports', 'es6-promise', 'common', 'crypto'], factory);
	} else if(typeof exports === 'object') {
		factory(exports, require('es6-promise'), require('./common'), require('crypto'));
	} else {
		factory((root.integrity_sha = {}), {Promise: Promise}, integrity_common, crypto);
	}
})(this, function(exports, Promise, common, crypto) {
	'use strict';

	Promise = Promise.Promise;

	var isNode = (typeof crypto.createHash === 'function');

	exports.sha1 = function(buff) {
		var result = new Promise(function(resolve, reject) {
		});

		return result;
	};

	exports.sha256 = function(buff) {
		var result = new Promise(function(resolve, reject) {
		});

		return result;
	};

	exports.sha384 = function(buff) {
		var result = new Promise(function(resolve, reject) {
		});

		return result;
	};

	exports.sha512 = function(buff) {
		var result = new Promise(function(resolve, reject) {
		});

		return result;
	};

	exports.md5 = function(buff) {
		var result = new Promise(function(resolve, reject) {
			calculate(
				buff,
				function(buff) {
				},
				function(err) {
					if(err) {
						return reject();
					}
				}
			);
		});

		return result;
	};

	var calculate = function(buff, process, end) {
		var sliceSize = 64,
			offset;

		if(typeof buff === 'string') {
			buff = common.stringToBuffer(buff);
		}

		if(typeof Buffer === 'function' && Buffer.isBuffer(buff)) {
			buff = common.bufferToArrayBuffer(buff);
		}

		if(buff.readable === true && typeof buff.on === 'function') {
			buff.on('data', function(slice) {
				process(common.bufferToArrayBuffer(slice));
			});
			buff.on('end', function() {
				end();
			});
		} else {
			if(!(buff instanceof ArrayBuffer)) {
				end(true);
				return;
			}
			for(var i = 0, max = Math.ceil((buff.byteLength || buff.length) / sliceSize); i < max; i++) {
				offset = i * sliceSize;
				process(buff.slice(offset, offset + sliceSize));
			}
			end();
		}
	};
});
